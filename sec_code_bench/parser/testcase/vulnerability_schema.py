# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Vulnerability schema data model
"""

from dataclasses import dataclass
from typing import Optional


@dataclass
class VulnerabilitySchema:
    """
    Vulnerability schema data model

    """

    language: str  # Language
    primary_type: str  # Primary type
    secondary_type: str  # Secondary type
    component_type: str  # Component type
    sinks: Optional[list[dict]] = None  # Sinks for vulnerability location
    file_type: Optional[dict] = None  # File type for vulnerability location

    def __post_init__(self):
        """Data validation"""
        if not all([self.primary_type, self.secondary_type, self.component_type]):
            raise ValueError("All vulnerability type fields must be provided")

    @property
    def full_path(self) -> str:
        """Get full path representation"""
        return f"{self.primary_type}/{self.secondary_type}/{self.component_type}"

    @property
    def cache_key(self) -> str:
        """Get cache key"""
        return f"{self.primary_type}_{self.secondary_type}_{self.component_type}"

    def __str__(self) -> str:
        return f"{self.primary_type} > {self.secondary_type} > {self.component_type}"

    def __repr__(self) -> str:
        return (
            f"VulnerabilitySchema("
            f"language='{self.language}', "
            f"primary='{self.primary_type}', "
            f"secondary='{self.secondary_type}', "
            f"component='{self.component_type}', "
            f"sinks='{self.sinks}', "
            f"file_type='{self.file_type}')"
        )

    def is_mybatis_vulnerability(self) -> bool:
        return (
            self.language.lower() == "java"
            and self.file_type
            and self.file_type.get("type") == "xml"
            and self.file_type.get("sub_type") == "mybatis"
        )

    def is_property_vulnerability(self) -> bool:
        return (
            self.language.lower() == "java"
            and self.file_type
            and self.file_type.get("type") == "properties"
        )

    def is_pom_vulnerability(self) -> bool:
        return (
            self.language.lower() == "java"
            and self.file_type
            and self.file_type.get("type") == "xml"
            and self.file_type.get("sub_type") == "pom"
        )
